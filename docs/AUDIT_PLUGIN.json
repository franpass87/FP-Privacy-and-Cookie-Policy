{
  "meta": {
    "plugin": "FP Privacy and Cookie Policy",
    "date": "2024-05-17",
    "wp_min": "6.6",
    "php_targets": [
      "8.2",
      "8.3"
    ]
  },
  "summary": {
    "files_scanned": 59,
    "files_total": 59,
    "issues_total": 4,
    "by_severity": {
      "critical": 0,
      "high": 3,
      "medium": 1,
      "low": 0
    }
  },
  "issues": [
    {
      "id": "ISSUE-001",
      "severity": "high",
      "category": [
        "ux",
        "data-loss"
      ],
      "file": "fp-privacy-cookie-policy/src/Utils/Options.php",
      "line": 704,
      "snippet": "if ( $post instanceof WP_Post ) {\n    $needs_refresh = 'publish' !== $post->post_status || trim( (string) $post->post_content ) !== $content;\n    if ( ! $needs_refresh ) {\n        continue;\n    }\n    $result = \\\\wp_update_post( array( 'ID' => $post->ID, 'post_status' => 'publish', 'post_type' => 'page', 'post_content' => $content ), true );",
      "diagnosis": "ensure_pages_exist() overwrites the policy pages whenever their content differs from the generated shortcode, so manual edits are reverted on every request.",
      "impact": "Functional regression and loss of customised legal copy.",
      "repro": [
        "Edit the generated privacy policy page and save custom text.",
        "Load any front-end page (or visit the settings screen).",
        "Notice the page content has been replaced with the default shortcode."
      ],
      "proposed_fix": "Only refresh when the page is missing/trashed or still matches the autogenerated marker; otherwise skip wp_update_post() or track ownership via post meta before overwriting.",
      "effort": "M",
      "tags": [
        "pages",
        "options"
      ]
    },
    {
      "id": "ISSUE-002",
      "severity": "high",
      "category": [
        "frontend",
        "rest",
        "csrf"
      ],
      "file": "fp-privacy-cookie-policy/src/REST/Controller.php",
      "line": 138,
      "snippet": "$nonce = $request->get_header( 'X-WP-Nonce' );\nif ( ! $nonce || ! \\\\wp_verify_nonce( $nonce, 'wp_rest' ) ) {\n    return new WP_Error( 'fp_privacy_invalid_nonce', \\\\__( 'Invalid security token.', 'fp-privacy' ), array( 'status' => 403 ) );\n}",
      "diagnosis": "Consent submissions rely solely on the wp_rest nonce embedded in the cached page. After ~12h that nonce expires, so cached pages keep serving an invalid token and every visitor receives a 403.",
      "impact": "Visitors cannot record consent on cached pages, leaving the banner stuck and creating compliance risk.",
      "repro": [
        "Cache a public page (e.g. CDN/full-page cache) for longer than 12 hours.",
        "Visit the cached page and click Accept on the banner.",
        "The REST call returns 403 Invalid security token and consent is not saved."
      ],
      "proposed_fix": "Provide a cache-safe nonce (e.g. wp_create_nonce('fp_privacy_consent') stored with the banner cookie or derived from fp_privacy_get_ip_salt()) and accept it alongside wp_rest; alternatively, detect nonce failure and mint a fresh token before retrying.",
      "effort": "M",
      "tags": [
        "consent",
        "cache",
        "rest"
      ]
    },
    {
      "id": "ISSUE-003",
      "severity": "medium",
      "category": [
        "performance"
      ],
      "file": "fp-privacy-cookie-policy/src/Utils/Options.php",
      "line": 641,
      "snippet": "$this->options['consent_revision'] = isset( $this->options['consent_revision'] ) ? (int) $this->options['consent_revision'] + 1 : 1;\n\\\\update_option( self::OPTION_KEY, $this->options );",
      "diagnosis": "bump_revision() updates fp_privacy_options without the $autoload flag, so WordPress flips the option back to autoload=yes despite earlier saves setting autoload=no.",
      "impact": "Loads a large options row on every request after bumping revisions, hurting memory and response time.",
      "repro": [
        "Confirm fp_privacy_options has autoload=no after saving settings.",
        "Use the Force new consent button.",
        "Check the option again \u2013 autoload is now yes."
      ],
      "proposed_fix": "Call update_option( self::OPTION_KEY, $this->options, false ); when bumping revisions so the autoload flag stays disabled.",
      "effort": "S",
      "tags": [
        "autoload",
        "options"
      ]
    },
    {
      "id": "ISSUE-004",
      "severity": "high",
      "category": [
        "compliance",
        "gdpr"
      ],
      "file": "fp-privacy-cookie-policy/src/Consent/ExporterEraser.php",
      "line": 91,
      "snippet": "public function export_personal_data( $email, $page ) {\\n    $consent_id = \\sanitize_text_field( $email );\\n    $results = $wpdb->get_results( $wpdb->prepare( \"SELECT * FROM {$this->log_model->get_table()} WHERE consent_id = %s ORDER BY created_at ASC LIMIT %d OFFSET %d\", $consent_id, $per_page, $offset ), ARRAY_A );",
      "diagnosis": "WordPress privacy exports pass the requester email, but the exporter treats it as a consent ID cookie token, so lookups always miss and return no data.",
      "impact": "GDPR export and erasure requests silently report success with empty data, leaving consent logs undeclared and violating DSAR obligations.",
      "repro": [
        "Record a consent to populate the log table.",
        "Create a Tools \u2192 Export Personal Data request for the visitor's email and approve it.",
        "Run the export; the generated report contains no entries despite existing consent logs."
      ],
      "proposed_fix": "Map email-based requests to consent IDs before querying (e.g. store consent IDs against user/email or provide a filter that supplies matching IDs); if no mapping exists, avoid registering the exporter/eraser so WordPress does not claim success.",
      "effort": "M",
      "tags": [
        "exporter",
        "eraser",
        "consent"
      ]
    }
  ],
  "conflicts": [
    {
      "paths": [
        "fp-privacy-cookie-policy/templates/privacy-policy.php",
        "fp-privacy-cookie-policy/templates/cookie-policy.php"
      ],
      "detail": "Both templates declare fp_privacy_format_service_cookies() and fp_privacy_get_service_value(); consolidate to avoid duplicate definitions."
    }
  ],
  "compat": {
    "deprecated": [],
    "php_warnings": []
  },
  "perf": {
    "hotspots": [
      "ISSUE-003: bump_revision() re-enables autoload on a large option payload."
    ],
    "autoload_options": [],
    "cron": []
  },
  "i18n": {
    "domain_issues": [],
    "missing": []
  },
  "tests": {
    "gaps": [
      "No automated coverage for consent REST flow or policy provisioning."
    ],
    "suggestions": [
      "Add integration tests for consent submissions and options lifecycle."
    ]
  }
}
